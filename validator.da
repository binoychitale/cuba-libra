import os
import sys
import time
from typing import Dict, List, Tuple

from nacl import encoding
from nacl.signing import SignedMessage, SigningKey, VerifyKey

from modules.block_tree.block_tree import BlockTree
from modules.leaderelection.leaderelection import LeaderElection
from modules.ledger.ledger import Ledger
from modules.main.main import Main
from modules.mempool.mempool import MemPool
from modules.objects import (
    MsgType,
    ProposalMessage,
    Signatures,
    TimeoutMessage,
    Transaction,
    VoteMsg,
)
from modules.pacemaker.pacemaker import Pacemaker
from modules.safety.safety import Safety
from modules.logger.logger import init_logging

client = import_da("client")


class Validator(process):
    def setup(
        ps: set,
        id: int,
        f: int,
        key_pair: Tuple[SigningKey, VerifyKey],
        public_key_map: Dict[int, VerifyKey],
        validator_map: Dict[int, Validator],
        validator_keypair_map: Dict[int, Tuple[SigningKey, VerifyKey]],
        client_map: Dict[int, client.Client],
        client_keypair_map: Dict[int, Tuple[SigningKey, VerifyKey]],
        parent,
    ):
        # do any additional setup here
        self.local_timeout_time = round(time.time() * 1000)

        self.safety = Safety(key_pair[0], validator_keypair_map, id)
        ledger = Ledger(id)
        block_tree = BlockTree(ledger, f, id)
        leader_election = LeaderElection(len(public_key_map.keys()))
        pacemaker = Pacemaker(f, id, leader_election)
        self.mempool = MemPool()
        self.main = Main(
            block_tree, leader_election, pacemaker, safety, ledger, mempool, id
        )

        self.validator_id = id
        self.round_done = False
        self.client_map = client_map
        self.all_validators = ps | set([self])
        self.terminate_count = 0
        self.client_keypair_map = client_keypair_map
        self.parent = parent
        self.logger = init_logging(os.path.dirname(os.path.abspath(__file__)), 'validator-'+str(id)+'.log')

    def run():
        output("Starting Validator {}...".format(self.validator_id))
        init_state = True
        while True:
            --receive
            # Check if 5 seconds have elapsed since timer was set
            if (
                init_state
                and self.main.check_if_current_leader()
                and self.main.pacemaker.current_round == 0
                and len(self.mempool.queue) > 0
            ):
                # Send a proposal
                proposal = self.main.get_next_proposal(None)
                if proposal:
                    init_state = False
                    send(
                        (
                            "Message-Proposal",
                            (proposal.create_signed_payload(key_pair[0])),
                        ),
                        to=self.ps,
                    )
            if await (
                self.main.round_done or self.terminate_count == len(self.client_map)
            ):
                if self.terminate_count == len(self.client_map):
                    output(
                        "Received exit in Validator: {}\nLedger state: {}\nRounds: {}".format(
                            self.validator_id, self.main.ledger.display(), [cb.block.round for cb in self.main.ledger.ledger]
                        )
                    )
                    send(("Terminate"), to=self.parent)
                    break
                self.main.round_done = False

            elif timeout(5):
                output(
                    "Local timeout at {} for round {}".format(self.validator_id, self.main.pacemaker.current_round)
                )
                init_state = False
                timeout_msg: TimeoutMessage = self.main.pacemaker.local_timeout_round(
                    self.main.safety, self.main.block_tree
                )
                self.process_timeout(timeout_msg)
                send(
                    (
                        "Message-Timeout",
                        (timeout_msg.create_signed_payload(key_pair[0])),
                    ),
                    to=self.ps,
                )

    # Have a separate receive handler for each type of message

    def receive(msg=("Client-Transaction", body), from_=source):
        transaction = body[0]
        signed_transaction = body[1]
        verified_transaction: Transaction = Signatures.verify_signed_payload(
            signed_transaction, client_keypair_map[transaction.client_id][1]
        )
        if not verified_transaction:
            raise Exception("There is an imposter among us !!")

        self.mempool.queue[transaction.id] = verified_transaction

    # Handle message proposal
    def receive(msg=("Message-Proposal", body), from_=source):
        proposal: ProposalMessage = body[0]
        signed_proposal: SignedMessage = body[1]
        output(
            "Proposal from {} received at {} for round {}".format(proposal.sender_id, self.validator_id, proposal.block.round)
        )

        verified_proposal: ProposalMessage = Signatures.verify_signed_payload(
            signed_proposal, validator_keypair_map[proposal.sender_id][1]
        )
        if not verified_proposal:
            raise Exception("There is an imposter among us !!")
        else:
            output("Signed Proposal of {} verified by validator {} for round {}".format(proposal.sender_id, self.validator_id, proposal.block.round))

        vote, trx_to_deque = self.main.process_proposal_msg(verified_proposal)
        trx_client_map = self.main.deque_trx(trx_to_deque)
        for trx_id, client_id in trx_client_map.items():
            send(
                ("Client-Reply", (trx_id, self.validator_id)),
                to=self.client_map[client_id],
            )
        if trx_client_map:
            output("Sent replies to Client and dequeuing from Mempool for round {}: {}".format(
                self.main.pacemaker.current_round, trx_to_deque))

        next_leader = self.main.leader_election.get_leader(
            self.main.pacemaker.current_round
        )
        if vote:
            send(
                (
                    "Message-Vote",
                    (
                        vote.create_signed_payload(key_pair[0]),
                        verified_proposal.trx_ids,
                    ),
                ),
                to=validator_map[next_leader],
            )

    def receive(msg=("Message-Vote", body), from_=source):
        # Handle vote message
        vote: VoteMsg = body[0][0]
        signed_vote: SignedMessage = body[0][1]
        verified_vote: VoteMsg = Signatures.verify_signed_payload(
            signed_vote, validator_keypair_map[vote.sender][1]
        )
        trx_ids: List[str] = body[1]
        output(
            "Vote from {} received at {} for round {}".format(
                vote.sender, self.validator_id, self.main.pacemaker.current_round)
        )

        if not verified_vote:
            raise Exception("There is an imposter among us !!")
        else:
            output("Signed Vote of {} verified by validator {} for round {}".format(
                vote.sender, self.validator_id, self.main.pacemaker.current_round))

        new_qc, deque_txns = self.main.process_vote_msg(verified_vote)
        trx_client_map = self.main.deque_trx(deque_txns)
        for trx_id, client_id in trx_client_map.items():
            send(
                ("Client-Reply", (trx_id, self.validator_id)),
                to=self.client_map[client_id],
            )
        if trx_client_map:
            output("Sent replies to Client and dequeuing from Mempool in round {}: {}".format(
                self.main.pacemaker.current_round, deque_txns))

        if new_qc:
            trx_client_map = self.main.deque_trx(trx_ids)
            for trx_id, client_id in trx_client_map.items():
                send(
                    ("Client-Reply", (trx_id, self.validator_id)),
                    to=self.client_map[client_id],
                )
            if trx_client_map:
                output("Sent replies to Client and dequeuing from Mempool {}: {}".format(
                    self.main.pacemaker.current_round, trx_ids))

            next_proposal = self.main.get_next_proposal(new_qc, trx_ids)
            if next_proposal:
                send(
                    (
                        "Message-Proposal",
                        (next_proposal.create_signed_payload(key_pair[0])),
                    ),
                    to=self.ps,
                )

    def receive(msg=("Message-Timeout", body), from_=source):
        # Handle remote timeout message

        timeout_msg: TimeoutMessage = body[0]
        signed_timeout: SignedMessage = body[1]

        output("Timeout received at {} for round {} from {}".format(
            self.validator_id, timeout_msg.tmo_info.round, timeout_msg.id)
        )

        verified_timeout_msg: TimeoutMessage = Signatures.verify_signed_payload(
            signed_timeout, validator_keypair_map[timeout_msg.id][1]
        )

        if not verified_timeout_msg:
            raise Exception("There is an imposter among us !!")
        else:
            output("Signed Timeout Message of {} verified by validator {} for round {}".format(
                timeout_msg.id, self.validator_id, self.main.pacemaker.current_round))

        self.process_timeout(verified_timeout_msg)

    def process_timeout(timeout_msg):
        new_proposal = self.main.process_timeout_msg(timeout_msg)
        if new_proposal:
            output(
                "Found Timeout Certificate at {} for round {}".format(self.validator_id, new_proposal.last_round_tc.round)
            )
            send(
                (
                    "Message-Proposal",
                    (new_proposal.create_signed_payload(key_pair[0])),
                ),
                to=ps,
            )

    def receive(msg=("Client-Exit"), from_=source):
        self.terminate_count += 1

    def get_validator_id():
        return self.validator_id

    def get_leader():
        self.main.leader_election.get_leader(self.main.pacemaker.current_round)

    def get_current_round():
        return self.main.pacemaker.current_round

    def set_current_round(round):
        self.main.pacemaker.current_round = round

    def set_highest_vote_count(highest_vote_round):
        self.main.safety.highest_vote_round = highest_vote_round

    def get_validator_map():
        return self.validator_map
