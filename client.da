import uuid
from typing import Dict, Tuple

from nacl.signing import SigningKey, VerifyKey

from modules.objects import Transaction

validator = import_da("validator")


class Client(process):
    def setup(
        id: int,
        f: int,
        client_key_pair: Tuple[SigningKey, VerifyKey],
        client_pubkey_map: Dict[int, VerifyKey],
        validator_map: Dict[int, validator.Validator],
        client_map: Dict[int, Client],
    ):
        # do any additional setup here
        self.f = f
        self.client_id = id
        self.client_map = client_map
        self.validators = list(validator_map.values())
        self.pending_requests = {}

    def run():
        uid = uuid.uuid4().hex
        transaction = Transaction("hello", uid, self.client_id)
        self.pending_requests[uid] = self.client_id
        output(
            "Sending Transaction with trx_id {} from client {}".format(
                uid, self.client_id
            )
        )
        send(("Client-Transaction", transaction), to=self.validators)

        while True:
            --receive

    def receive(msg=("Client-Reply", body), from_=source):
        output(
            "Received Reply back for trx_id {} in client {}".format(
                body, self.client_id
            )
        )
        self.pending_requests.pop(body)
        output(
            "Number of pending requests in client {} = {}".format(
                self.client_id, len(self.pending_requests)
            )
        )
