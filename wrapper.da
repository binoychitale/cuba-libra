from modules.objects import generate_test_configs
from validator import *
from client import Client


class RunDiemBFT(process):
    def setup(test_config: TestConfig):
        self.test_config = test_config

    def run():
        f = (test_config.nvalidators - 1) // 3
        validators = new(Validator, num=test_config.nvalidators)
        clients = new(Client, num=test_config.num_clients)
        validator_map = {idx: validator for idx, validator in enumerate(validators)}
        validator_keypair_map = {
            idx: test_config.validator_key_pairs[idx] for idx, _ in enumerate(validators)
        }
        client_map = {idx: client for idx, client in enumerate(clients)}
        
        for idx, validator in enumerate(validators):
            setup(
                {
                    validator,
                },
                (
                    validators - {validator},
                    idx,
                    f,
                    test_config.validator_key_pairs[idx],
                    test_config.validator_pubkey_map,
                    validator_map,
                    validator_keypair_map,
                    client_map,
                ),
            )
        for idx, client in enumerate(clients):
            setup(
                {
                    client,
                },
                (
                    idx,
                    f,
                    test_config.client_key_pairs[idx],
                    test_config.client_pubkey_map,
                    validator_map,
                    client_map
                )
            )
        start(validators)
        start(clients)

def main():
    config(clock="Lamport")
    configs = generate_test_configs()
    for config in configs:
        p = new(RunDiemBFT)
        setup(p, (config,))
        start(p)
        break
