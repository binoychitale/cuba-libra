from client import Client
from modules.fault_injection.fault_injection import ValidatorFI
from modules.objects import (
    FailType,
    Failure,
    FailureConfig,
    MsgType,
    failure_cases,
    generate_test_configs,
)
from validator import *


class RunDiemBFT(process):
    def setup(test_config: TestConfig, failure_config: FailureConfig):
        self.test_config = test_config
        self.term_count = 0
        self.n = test_config.nvalidators

    def run():
        f = (test_config.nvalidators - 1) // 3
        validators = new(ValidatorFI, num=test_config.nvalidators)
        clients = new(Client, num=test_config.num_clients)
        validator_map = {idx: validator for idx, validator in enumerate(validators)}
        validator_keypair_map = {
            idx: test_config.validator_key_pairs[idx]
            for idx, _ in enumerate(validators)
        }
        client_map = {idx: client for idx, client in enumerate(clients)}
        client_keypair_map = {
            idx: test_config.client_key_pairs[idx] for idx, _ in enumerate(clients)
        }

        for idx, validator in enumerate(validators):
            setup(
                {
                    validator,
                },
                (
                    validators - {validator},
                    idx,
                    f,
                    test_config.validator_key_pairs[idx],
                    test_config.validator_pubkey_map,
                    validator_map,
                    validator_keypair_map,
                    client_map,
                    client_keypair_map,
                    failure_config,
                    self,
                ),
            )
        for idx, client in enumerate(clients):
            setup(
                {
                    client,
                },
                (
                    idx,
                    f,
                    test_config.client_key_pairs[idx],
                    test_config.client_pubkey_map,
                    validator_map,
                    client_map,
                ),
            )
        start(validators)
        start(clients)
        await (self.term_count >= self.n)

    def receive(msg=("Terminate")):
        self.term_count += 1


def main():
    config(channel="fifo")
    configs = generate_test_configs()
    for config in configs:
        for failure in failure_cases:
            print(
                "Running test: validators: {}, clients: {} \n".format(
                    config.nvalidators, config.num_clients
                )
            )
            print("Failure model: {} \n".format(failure["msg"]))
            p = new(RunDiemBFT)
            setup(p, (config, failure["rules"]))
            start(p)
            input()
        break
