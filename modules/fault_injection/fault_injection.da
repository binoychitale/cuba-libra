import time
from typing import Dict, NamedTuple, Tuple

from nacl.signing import SigningKey, VerifyKey
from scipy.stats import bernoulli

from modules.block_tree.block_tree import BlockTree
from modules.leaderelection.leaderelection import LeaderElection
from modules.ledger.ledger import Ledger
from modules.main.main import Main
from modules.objects import FailType, MsgType
from validator import Validator


class ValidatorFI(process, Validator):
    def setup(
        ps: set,
        id: int,
        f: int,
        key_pair: Tuple[SigningKey, VerifyKey],
        public_key_map: Dict[int, VerifyKey],
        validator_map: Dict[int, Validator],
        validator_keypair_map: Dict[int, Tuple[SigningKey, VerifyKey]],
        client_map: Dict[int, client.Client],
        client_keypair_map: Dict[int, Tuple[SigningKey, VerifyKey]],
        failure_config: NamedTuple,
        parent,
    ):
        self.failure_config = failure_config
        super().setup(
            ps,
            id,
            f,
            key_pair,
            public_key_map,
            validator_map,
            validator_keypair_map,
            client_map,
            client_keypair_map,
            parent,
        )
        # do any additional setup here

    def send(m, to):
        for failure in self.failure_config.failures:
            if (
                (failure.src == super().get_validator_id() or failure.src == "_")
                and (
                    failure.dest == self.get_pid(to)
                    or failure.dest == "_"
                    or (
                        failure.dest == "leader"
                        and self.get_pid(to) == super().get_leader()
                    )
                )
                and (
                    failure.msg_type == MsgType.Wildcard
                    or failure.msg_type == self.msg_string_to_enum(m[0])
                )
                and super().get_current_round() == failure.round
            ):

                to_fail = bernoulli.rvs(failure.prob, size=1)
                if to_fail[0] == 0:
                    break
                elif failure.fail_type == FailType.Delay:
                    print(
                    "DELAY ON------------------------------------------------------------------------------------------")
                    time.sleep(failure.val)
                elif failure.fail_type == FailType.MsgLoss:
                    print(
                    "MSG LOSS ON------------------------------------------------------------------------------------------")
                    return
                elif failure.fail_type == FailType.SetAttr:
                    if failure.attr == "round":
                        print("FOUND ROUND INJECTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                        super().set_current_round(failure.val)
                    elif failure.attr == "highest_vote_round":
                        super().set_highest_vote_round(failure.val)
        super().send(m, to)

    def get_pid(dest_p_obj):
        for (id, p_obj) in enumerate(super().get_validator_map()):
            if dest_p_obj == p_obj:
                return id

    def msg_string_to_enum(msg_type):
        if msg_type == "Message-Proposal":
            return MsgType.Proposal
        elif msg_type == "Message-Vote":
            return MsgType.Vote
        elif msg_type == "Message-Timeout":
            return MsgType.TimeOut
